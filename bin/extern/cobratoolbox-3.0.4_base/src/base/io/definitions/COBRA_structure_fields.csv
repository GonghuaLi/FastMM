Model Field	Xdim	Ydim	Evaluator	databaseid	qualifier	qualifierType	referenced Field	Default Value	DBPatterns	Property Description	Field Description	BasicFields	FieldBasisType	FBAFields
S	mets	rxns	isnumeric(x) || issparse(x)					0		Sparse or Full Matrix of Double	The stoichiometric matrix containing the model structure (for large models a sparse format is suggested)	'true(1)'	sparse	'true(1)'
mets	mets	1	iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))					['M' num2str(i)]		Column Cell Array of Strings	Identifiers of the metabolites	'true(1)'	cell	'false(1)'
b	mets	1	isnumeric(x)					0		Column Vector of Doubles	The coefficients of the constraints of the metabolites.	'false(1)'	numeric	'true(1)'
csense	mets	1	ischar(x)					E		Column Vector of Chars	The sense of the constraints represented by b, each row is either E (equality), L(less than) or G(greater than)	'false(1)'	char	'true(1)'
rxns	rxns	1	iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))					['R' num2str(i)]		Column Cell Array of Strings	Identifiers for the reactions.	'true(1)'	cell	'false(1)'
lb	rxns	1	isnumeric(x)					-1000		Column Vector of Doubles	The lower bounds for fluxes through the reactions.	'true(1)'	numeric	'true(1)'
ub	rxns	1	isnumeric(x)					1000		Column Vector of Doubles	The upper bounds for fluxes through the reactions.	'true(1)'	numeric	'true(1)'
c	rxns	1	isnumeric(x)					0		Column Vector of Doubles	The objective coefficient of the reactions.	'true(1)'	numeric	'true(1)'
osenseStr	NaN	NaN	ischar(x) && strcmpi(x,'max') || strcmpi(x,'min')					max		String	The objective sense either `'max'` for maximisation or `'min'` for minimisation	'false(1)'	char	'true(1)'
genes	genes	1	iscell(x) && ~any(cellfun(@isempty, x)) && all(cellfun(@(y) ischar(y) , x))					['G' num2str(i)]		Column Cell Array of Strings	Identifiers of the genes in the model	'true(1)'	cell	'false(1)'
rules	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	"GPR rules in evaluateable format for each reaction ( e.g. ""x(1) &#124; x(2) & x(3)"", would indicate the first gene or both the second and third gene are necessary for the respective reaction to carry flux"	'true(1)'	cell	'false(1)'
geneNames	genes	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))		is	bioQualifier	genes	model.genes{i}		Column Cell Array of Strings	Full names of each corresponding genes.	'false(1)'	cell	'false(1)'
compNames	comps	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.comps{i}		Column Cell Array of Strings	Descriptions of the Compartments (compNames(m) is associated with comps(m))	'false(1)'	cell	'false(1)'
comps	comps	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					['C' num2str{i}]		Column Cell Array of Strings	Symbols for compartments, can include Tissue information	'false(1)'	cell	'false(1)'
proteinNames	genes	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.proteins{i}		Column Cell Array of Strings	Full Name for each Protein	'false(1)'	cell	'false(1)'
proteins	genes	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					['COBRAProtein' num2str(i)]		Column Cell Array of Strings	Proteins associated with each gene.	'false(1)'	cell	'false(1)'
metCharges	mets	1	isnumeric(x)					NaN		Column Vector of Double	The charge of the respective metabolite (NaN if unknown)	'false(1)'	numeric	'false(1)'
metFormulas	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	Elemental formula for each metabolite.	'false(1)'	cell	'false(1)'
metSmiles	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	Formula for each metabolite in SMILES Format	'false(1)'	cell	'false(1)'
metNames	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.mets{i}		Column Cell Array of Strings	Full name of each corresponding metabolite.	'false(1)'	cell	'false(1)'
metNotes	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	Additional Notes for the respective metabolite.	'false(1)'	cell	'false(1)'
metHMDBID	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	hmdb	is	bioQualifier	mets	''	^HMDB\d{5}$	Column Cell Array of Strings	HMDB ID of the metabolite.	'false(1)'	cell	'false(1)'
metInChIString	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	inchi	is	bioQualifier	mets	''	^InChI\=1S?\/[A-Za-z0-9]+(\+[0-9]+)?(\/[cnpqbtmsih][A-Za-z0-9\-\+\(\)\,\/]+)*$	Column Cell Array of Strings	Formula for each metabolite in the InCHI strings format.	'false(1)'	cell	'false(1)'
metKEGGID	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	kegg.compound;kegg	is	bioQualifier	mets	''	^C\d+$	Column Cell Array of Strings	KEGG ID of the metabolite.	'false(1)'	cell	'false(1)'
metChEBIID	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	chebi;obo.chebi	is	bioQualifier	mets	''	^CHEBI:\d+$	Column Cell Array of Strings	ChEBI ID of the metabolite.	'false(1)'	cell	'false(1)'
metPubChemID	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	pubchem.compound	is	bioQualifier	mets	''	^\d+$	Column Cell Array of Strings	PubChem ID of each metabolite	'false(1)'	cell	'false(1)'
metMetaNetXID	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	metanetx.chemical	is	bioQualifier	mets	''	^MNXM\d+$	Column Cell Array of Strings	MetaNetX identifier of the metabolite	'false(1)'	cell	'false(1)'
metSBOTerms	mets	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	sbo	hasProperty	bioQualifier	mets	''	^SBO:\d{7}$	Column Cell Array of Strings	The SBO Identifier associated with the metabolite	'false(1)'	cell	'false(1)'
geneEntrezID	genes	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	ncbigene	is;isEncodedBy	bioQualifier	genes	''	^\d+$	Column Cell Array of Strings	Entrez IDs of genes	'false(1)'	cell	'false(1)'
grRules	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	A string representation of the GPR rules defined in a readable format.	'false(1)'	cell	'false(1)'
rxnGeneMat	rxns	genes	issparse(x) || isnumeric(x) || islogical(x)					0		Sparse or Full Matrix of Double or Boolean	Matrix with rows corresponding to reactions and columns corresponding to genes.	'false(1)'	sparselogical	'false(1)'
rxnConfidenceScores	rxns	1	isnumeric(x) || iscell(x) && isnumeric(cellfun(str2num,x))					0		Column Vector of double	Confidence scores for reaction presence (0-5, with 5 being the highest confidence)	'false(1)'	numeric	'false(1)'
rxnNames	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.rxns{i}		Column Cell Array of Strings	Full name of each corresponding reaction.	'false(1)'	cell	'false(1)'
rxnNotes	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					''		Column Cell Array of Strings	Description of each corresponding reaction.	'false(1)'	cell	'false(1)'
rxnECNumbers	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	ec-code	is;isVersionOf	bioQualifier	rxns	''	^\d+\.-\.-\.-|\d+\.\d+\.-\.-|\d+\.\d+\.\d+\.-|\d+\.\d+\.\d+\.(n)?\d+$	Column Cell Array of Strings	E.C. number for each reaction.	'false(1)'	cell	'false(1)'
rxnReferences	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	pubmed	isDescribedBy	bioQualifier	rxns	''	^\d+$	Column Cell Array of Strings	Description of references for each corresponding reaction.	'false(1)'	cell	'false(1)'
rxnKEGGID	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	kegg.reaction;kegg	is	bioQualifier	rxns	''	^R\d+$	Column Cell Array of Strings	Formula for each reaction in the KEGG format.	'false(1)'	cell	'false(1)'
rxnMetaNetXID	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	metanetx.reaction	is	bioQualifier	rxns	''	^MNXR\d+$	Column Cell Array of Strings	MetaNetX identifier of the reaction	'false(1)'	cell	'false(1)'
rxnSBOTerms	rxns	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))	sbo	hasProperty	bioQualifier	rxns	''	^SBO:\d{7}$	Column Cell Array of Strings	The SBO Identifier associated with the reaction	'false(1)'	cell	'false(1)'
subSystems	rxns	1	iscell(x) && all(cellfun(@(y) ischar(strjoin([y(:)],';')) , x))					{''}		Column Cell Array of Cell Arrays of Strings	subSystem assignment for each reaction	'false(1)'	cell	'false(1)'
description	NaN	NaN	ischar(x) || isstruct(x)					struct()		String or Struct	Name of a file the model is loaded from.	'false(1)'	char	'false(1)'
modelVersion	NaN	NaN	isstruct(x)					struct()		Struct	Information on the model version	'false(1)'	struct	'false(1)'
modelName	NaN	NaN	ischar(x)					'Model Exported from COBRA Toolbox'		String	A Descriptive Name of the model	'false(1)'	char	'false(1)'
modelID	NaN	NaN	ischar(x)					'COBRAModel'		String	The ID of the model	'false(1)'	char	'false(1)'
E	mets	evars	isnumeric(x) || issparse(x)					0		Sparse or Full Matrix of Double	Matrix of additional, non metabolic variables (e.g. Enzyme capacity variables)	'false(1)'	sparse	'true(1)'
evarlb	evars	1	isnumeric(x)					-1000		Column Vector of Doubles	Lower bounds of the additional variables	'false(1)'	numeric	'true(1)'
evarub	evars	1	isnumeric(x)					1000		Column Vector of Doubles	Upper bounds of the additional variables	'false(1)'	numeric	'true(1)'
evarc	evars	1	isnumeric(x)					0		Column Vector of Doubles	Objective coefficient of the additional variables 	'false(1)'	numeric	'true(1)'
evars	evars	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					['Variable' num2str(i)]		Column Cell Array of Strings	IDs of the additional variables	'false(1)'	cell	'false(1)'
evarNames	evars	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.evars{i}		Column Cell Array of Strings	Names of the additional variables	'false(1)'	cell	'false(1)'
C	ctrs	rxns	isnumeric(x) || issparse(x)					0		Sparse or Full Matrix of Double	Matrix of additional Constraints (e.g. Coupling Constraints)	'false(1)'	sparse	'true(1)'
ctrs	ctrs	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					['Constraint' num2str(i)]		Column Cell Array of Strings	IDs of the additional Constraints	'false(1)'	cell	'false(1)'
ctrNames	ctrs	1	iscell(x) && all(cellfun(@(y) ischar(y) , x))					model.ctrs{i}		Column Cell Array of Strings	Names of the of the additional Constraints	'false(1)'	cell	'false(1)'
d	ctrs	1	isnumeric(x)					0		Column Vector of Doubles	Right hand side values of the additional Constraints	'false(1)'	numeric	'true(1)'
dsense	ctrs	1	ischar(x)					E		Column Vector of Chars	Senses of the additional Constraints	'false(1)'	char	'true(1)'
D	ctrs	evars	isnumeric(x) || issparse(x)					0		Sparse or Full Matrix of Double	Matrix to store elements that contain interactions between additional Constraints and additional Variables	'false(1)'	sparse	'true(1)'
